// Generated by ProtoGen, Version=2.4.1.555, Culture=neutral, PublicKeyToken=17b3b1f090c3ea48.  DO NOT EDIT!
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace atwork_pb_msgs {
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class ConveyorBelt {
  
    #region Extension registration
    public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
    }
    #endregion
    #region Static variables
    internal static pbd::MessageDescriptor internal__static_atwork_pb_msgs_ConveyorBeltStatus__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::atwork_pb_msgs.ConveyorBeltStatus, global::atwork_pb_msgs.ConveyorBeltStatus.Builder> internal__static_atwork_pb_msgs_ConveyorBeltStatus__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_atwork_pb_msgs_ConveyorBeltCommand__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::atwork_pb_msgs.ConveyorBeltCommand, global::atwork_pb_msgs.ConveyorBeltCommand.Builder> internal__static_atwork_pb_msgs_ConveyorBeltCommand__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_atwork_pb_msgs_TriggeredConveyorBeltStatus__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::atwork_pb_msgs.TriggeredConveyorBeltStatus, global::atwork_pb_msgs.TriggeredConveyorBeltStatus.Builder> internal__static_atwork_pb_msgs_TriggeredConveyorBeltStatus__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_atwork_pb_msgs_TriggeredConveyorBeltCommand__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::atwork_pb_msgs.TriggeredConveyorBeltCommand, global::atwork_pb_msgs.TriggeredConveyorBeltCommand.Builder> internal__static_atwork_pb_msgs_TriggeredConveyorBeltCommand__FieldAccessorTable;
    #endregion
    #region Descriptor
    public static pbd::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbd::FileDescriptor descriptor;
    
    static ConveyorBelt() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChJDb252ZXlvckJlbHQucHJvdG8SDmF0d29ya19wYl9tc2dzInEKEkNvbnZl", 
            "eW9yQmVsdFN0YXR1cxIyCgVzdGF0ZRgBIAIoDjIjLmF0d29ya19wYl9tc2dz", 
            "LkNvbnZleW9yQmVsdFJ1bk1vZGUiJwoIQ29tcFR5cGUSDAoHQ09NUF9JRBDQ", 
            "DxINCghNU0dfVFlQRRCsAiJ0ChNDb252ZXlvckJlbHRDb21tYW5kEjQKB2Nv", 
            "bW1hbmQYASACKA4yIy5hdHdvcmtfcGJfbXNncy5Db252ZXlvckJlbHRSdW5N", 
            "b2RlIicKCENvbXBUeXBlEgwKB0NPTVBfSUQQ0A8SDQoITVNHX1RZUEUQrQIi", 
            "iQEKG1RyaWdnZXJlZENvbnZleW9yQmVsdFN0YXR1cxIyCgVzdGF0ZRgBIAIo", 
            "DjIjLmF0d29ya19wYl9tc2dzLkNvbnZleW9yQmVsdFJ1bk1vZGUSDQoFY3lj", 
            "bGUYAiACKAUiJwoIQ29tcFR5cGUSDAoHQ09NUF9JRBDQDxINCghNU0dfVFlQ", 
            "RRC0AiKRAQocVHJpZ2dlcmVkQ29udmV5b3JCZWx0Q29tbWFuZBI0Cgdjb21t", 
            "YW5kGAEgAigOMiMuYXR3b3JrX3BiX21zZ3MuQ29udmV5b3JCZWx0UnVuTW9k", 
            "ZRISCgpuZXh0X2N5Y2xlGAIgAigFIicKCENvbXBUeXBlEgwKB0NPTVBfSUQQ", 
            "0A8SDQoITVNHX1RZUEUQtQIqKgoTQ29udmV5b3JCZWx0UnVuTW9kZRIICgRT", 
            "VE9QEAASCQoFU1RBUlQQAUIsChZvcmcuYXR3b3JrLmNvbW1vbl9tc2dzQhJD", 
          "b252ZXlvckJlbHRQcm90b3M="));
      pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
        descriptor = root;
        internal__static_atwork_pb_msgs_ConveyorBeltStatus__Descriptor = Descriptor.MessageTypes[0];
        internal__static_atwork_pb_msgs_ConveyorBeltStatus__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::atwork_pb_msgs.ConveyorBeltStatus, global::atwork_pb_msgs.ConveyorBeltStatus.Builder>(internal__static_atwork_pb_msgs_ConveyorBeltStatus__Descriptor,
                new string[] { "State", });
        internal__static_atwork_pb_msgs_ConveyorBeltCommand__Descriptor = Descriptor.MessageTypes[1];
        internal__static_atwork_pb_msgs_ConveyorBeltCommand__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::atwork_pb_msgs.ConveyorBeltCommand, global::atwork_pb_msgs.ConveyorBeltCommand.Builder>(internal__static_atwork_pb_msgs_ConveyorBeltCommand__Descriptor,
                new string[] { "Command", });
        internal__static_atwork_pb_msgs_TriggeredConveyorBeltStatus__Descriptor = Descriptor.MessageTypes[2];
        internal__static_atwork_pb_msgs_TriggeredConveyorBeltStatus__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::atwork_pb_msgs.TriggeredConveyorBeltStatus, global::atwork_pb_msgs.TriggeredConveyorBeltStatus.Builder>(internal__static_atwork_pb_msgs_TriggeredConveyorBeltStatus__Descriptor,
                new string[] { "State", "Cycle", });
        internal__static_atwork_pb_msgs_TriggeredConveyorBeltCommand__Descriptor = Descriptor.MessageTypes[3];
        internal__static_atwork_pb_msgs_TriggeredConveyorBeltCommand__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::atwork_pb_msgs.TriggeredConveyorBeltCommand, global::atwork_pb_msgs.TriggeredConveyorBeltCommand.Builder>(internal__static_atwork_pb_msgs_TriggeredConveyorBeltCommand__Descriptor,
                new string[] { "Command", "NextCycle", });
        return null;
      };
      pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
          new pbd::FileDescriptor[] {
          }, assigner);
    }
    #endregion
    
  }
  #region Enums
  public enum ConveyorBeltRunMode {
    STOP = 0,
    START = 1,
  }
  
  #endregion
  
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class ConveyorBeltStatus : pb::GeneratedMessage<ConveyorBeltStatus, ConveyorBeltStatus.Builder> {
    private ConveyorBeltStatus() { }
    private static readonly ConveyorBeltStatus defaultInstance = new ConveyorBeltStatus().MakeReadOnly();
    private static readonly string[] _conveyorBeltStatusFieldNames = new string[] { "state" };
    private static readonly uint[] _conveyorBeltStatusFieldTags = new uint[] { 8 };
    public static ConveyorBeltStatus DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override ConveyorBeltStatus DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override ConveyorBeltStatus ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::atwork_pb_msgs.ConveyorBelt.internal__static_atwork_pb_msgs_ConveyorBeltStatus__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<ConveyorBeltStatus, ConveyorBeltStatus.Builder> InternalFieldAccessors {
      get { return global::atwork_pb_msgs.ConveyorBelt.internal__static_atwork_pb_msgs_ConveyorBeltStatus__FieldAccessorTable; }
    }
    
    #region Nested types
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public static partial class Types {
      public enum CompType {
        COMP_ID = 2000,
        MSG_TYPE = 300,
      }
      
    }
    #endregion
    
    public const int StateFieldNumber = 1;
    private bool hasState;
    private global::atwork_pb_msgs.ConveyorBeltRunMode state_ = global::atwork_pb_msgs.ConveyorBeltRunMode.STOP;
    public bool HasState {
      get { return hasState; }
    }
    public global::atwork_pb_msgs.ConveyorBeltRunMode State {
      get { return state_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasState) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _conveyorBeltStatusFieldNames;
      if (hasState) {
        output.WriteEnum(1, field_names[0], (int) State, State);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasState) {
        size += pb::CodedOutputStream.ComputeEnumSize(1, (int) State);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static ConveyorBeltStatus ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ConveyorBeltStatus ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ConveyorBeltStatus ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ConveyorBeltStatus ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ConveyorBeltStatus ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ConveyorBeltStatus ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static ConveyorBeltStatus ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static ConveyorBeltStatus ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static ConveyorBeltStatus ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ConveyorBeltStatus ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private ConveyorBeltStatus MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(ConveyorBeltStatus prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<ConveyorBeltStatus, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(ConveyorBeltStatus cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private ConveyorBeltStatus result;
      
      private ConveyorBeltStatus PrepareBuilder() {
        if (resultIsReadOnly) {
          ConveyorBeltStatus original = result;
          result = new ConveyorBeltStatus();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override ConveyorBeltStatus MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::atwork_pb_msgs.ConveyorBeltStatus.Descriptor; }
      }
      
      public override ConveyorBeltStatus DefaultInstanceForType {
        get { return global::atwork_pb_msgs.ConveyorBeltStatus.DefaultInstance; }
      }
      
      public override ConveyorBeltStatus BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is ConveyorBeltStatus) {
          return MergeFrom((ConveyorBeltStatus) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(ConveyorBeltStatus other) {
        if (other == global::atwork_pb_msgs.ConveyorBeltStatus.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasState) {
          State = other.State;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_conveyorBeltStatusFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _conveyorBeltStatusFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              object unknown;
              if(input.ReadEnum(ref result.state_, out unknown)) {
                result.hasState = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(1, (ulong)(int)unknown);
              }
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasState {
       get { return result.hasState; }
      }
      public global::atwork_pb_msgs.ConveyorBeltRunMode State {
        get { return result.State; }
        set { SetState(value); }
      }
      public Builder SetState(global::atwork_pb_msgs.ConveyorBeltRunMode value) {
        PrepareBuilder();
        result.hasState = true;
        result.state_ = value;
        return this;
      }
      public Builder ClearState() {
        PrepareBuilder();
        result.hasState = false;
        result.state_ = global::atwork_pb_msgs.ConveyorBeltRunMode.STOP;
        return this;
      }
    }
    static ConveyorBeltStatus() {
      object.ReferenceEquals(global::atwork_pb_msgs.ConveyorBelt.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class ConveyorBeltCommand : pb::GeneratedMessage<ConveyorBeltCommand, ConveyorBeltCommand.Builder> {
    private ConveyorBeltCommand() { }
    private static readonly ConveyorBeltCommand defaultInstance = new ConveyorBeltCommand().MakeReadOnly();
    private static readonly string[] _conveyorBeltCommandFieldNames = new string[] { "command" };
    private static readonly uint[] _conveyorBeltCommandFieldTags = new uint[] { 8 };
    public static ConveyorBeltCommand DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override ConveyorBeltCommand DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override ConveyorBeltCommand ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::atwork_pb_msgs.ConveyorBelt.internal__static_atwork_pb_msgs_ConveyorBeltCommand__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<ConveyorBeltCommand, ConveyorBeltCommand.Builder> InternalFieldAccessors {
      get { return global::atwork_pb_msgs.ConveyorBelt.internal__static_atwork_pb_msgs_ConveyorBeltCommand__FieldAccessorTable; }
    }
    
    #region Nested types
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public static partial class Types {
      public enum CompType {
        COMP_ID = 2000,
        MSG_TYPE = 301,
      }
      
    }
    #endregion
    
    public const int CommandFieldNumber = 1;
    private bool hasCommand;
    private global::atwork_pb_msgs.ConveyorBeltRunMode command_ = global::atwork_pb_msgs.ConveyorBeltRunMode.STOP;
    public bool HasCommand {
      get { return hasCommand; }
    }
    public global::atwork_pb_msgs.ConveyorBeltRunMode Command {
      get { return command_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasCommand) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _conveyorBeltCommandFieldNames;
      if (hasCommand) {
        output.WriteEnum(1, field_names[0], (int) Command, Command);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasCommand) {
        size += pb::CodedOutputStream.ComputeEnumSize(1, (int) Command);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static ConveyorBeltCommand ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ConveyorBeltCommand ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ConveyorBeltCommand ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ConveyorBeltCommand ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ConveyorBeltCommand ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ConveyorBeltCommand ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static ConveyorBeltCommand ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static ConveyorBeltCommand ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static ConveyorBeltCommand ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ConveyorBeltCommand ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private ConveyorBeltCommand MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(ConveyorBeltCommand prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<ConveyorBeltCommand, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(ConveyorBeltCommand cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private ConveyorBeltCommand result;
      
      private ConveyorBeltCommand PrepareBuilder() {
        if (resultIsReadOnly) {
          ConveyorBeltCommand original = result;
          result = new ConveyorBeltCommand();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override ConveyorBeltCommand MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::atwork_pb_msgs.ConveyorBeltCommand.Descriptor; }
      }
      
      public override ConveyorBeltCommand DefaultInstanceForType {
        get { return global::atwork_pb_msgs.ConveyorBeltCommand.DefaultInstance; }
      }
      
      public override ConveyorBeltCommand BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is ConveyorBeltCommand) {
          return MergeFrom((ConveyorBeltCommand) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(ConveyorBeltCommand other) {
        if (other == global::atwork_pb_msgs.ConveyorBeltCommand.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasCommand) {
          Command = other.Command;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_conveyorBeltCommandFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _conveyorBeltCommandFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              object unknown;
              if(input.ReadEnum(ref result.command_, out unknown)) {
                result.hasCommand = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(1, (ulong)(int)unknown);
              }
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasCommand {
       get { return result.hasCommand; }
      }
      public global::atwork_pb_msgs.ConveyorBeltRunMode Command {
        get { return result.Command; }
        set { SetCommand(value); }
      }
      public Builder SetCommand(global::atwork_pb_msgs.ConveyorBeltRunMode value) {
        PrepareBuilder();
        result.hasCommand = true;
        result.command_ = value;
        return this;
      }
      public Builder ClearCommand() {
        PrepareBuilder();
        result.hasCommand = false;
        result.command_ = global::atwork_pb_msgs.ConveyorBeltRunMode.STOP;
        return this;
      }
    }
    static ConveyorBeltCommand() {
      object.ReferenceEquals(global::atwork_pb_msgs.ConveyorBelt.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class TriggeredConveyorBeltStatus : pb::GeneratedMessage<TriggeredConveyorBeltStatus, TriggeredConveyorBeltStatus.Builder> {
    private TriggeredConveyorBeltStatus() { }
    private static readonly TriggeredConveyorBeltStatus defaultInstance = new TriggeredConveyorBeltStatus().MakeReadOnly();
    private static readonly string[] _triggeredConveyorBeltStatusFieldNames = new string[] { "cycle", "state" };
    private static readonly uint[] _triggeredConveyorBeltStatusFieldTags = new uint[] { 16, 8 };
    public static TriggeredConveyorBeltStatus DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override TriggeredConveyorBeltStatus DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override TriggeredConveyorBeltStatus ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::atwork_pb_msgs.ConveyorBelt.internal__static_atwork_pb_msgs_TriggeredConveyorBeltStatus__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<TriggeredConveyorBeltStatus, TriggeredConveyorBeltStatus.Builder> InternalFieldAccessors {
      get { return global::atwork_pb_msgs.ConveyorBelt.internal__static_atwork_pb_msgs_TriggeredConveyorBeltStatus__FieldAccessorTable; }
    }
    
    #region Nested types
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public static partial class Types {
      public enum CompType {
        COMP_ID = 2000,
        MSG_TYPE = 308,
      }
      
    }
    #endregion
    
    public const int StateFieldNumber = 1;
    private bool hasState;
    private global::atwork_pb_msgs.ConveyorBeltRunMode state_ = global::atwork_pb_msgs.ConveyorBeltRunMode.STOP;
    public bool HasState {
      get { return hasState; }
    }
    public global::atwork_pb_msgs.ConveyorBeltRunMode State {
      get { return state_; }
    }
    
    public const int CycleFieldNumber = 2;
    private bool hasCycle;
    private int cycle_;
    public bool HasCycle {
      get { return hasCycle; }
    }
    public int Cycle {
      get { return cycle_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasState) return false;
        if (!hasCycle) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _triggeredConveyorBeltStatusFieldNames;
      if (hasState) {
        output.WriteEnum(1, field_names[1], (int) State, State);
      }
      if (hasCycle) {
        output.WriteInt32(2, field_names[0], Cycle);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasState) {
        size += pb::CodedOutputStream.ComputeEnumSize(1, (int) State);
      }
      if (hasCycle) {
        size += pb::CodedOutputStream.ComputeInt32Size(2, Cycle);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static TriggeredConveyorBeltStatus ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static TriggeredConveyorBeltStatus ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static TriggeredConveyorBeltStatus ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static TriggeredConveyorBeltStatus ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static TriggeredConveyorBeltStatus ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static TriggeredConveyorBeltStatus ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static TriggeredConveyorBeltStatus ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static TriggeredConveyorBeltStatus ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static TriggeredConveyorBeltStatus ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static TriggeredConveyorBeltStatus ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private TriggeredConveyorBeltStatus MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(TriggeredConveyorBeltStatus prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<TriggeredConveyorBeltStatus, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(TriggeredConveyorBeltStatus cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private TriggeredConveyorBeltStatus result;
      
      private TriggeredConveyorBeltStatus PrepareBuilder() {
        if (resultIsReadOnly) {
          TriggeredConveyorBeltStatus original = result;
          result = new TriggeredConveyorBeltStatus();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override TriggeredConveyorBeltStatus MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::atwork_pb_msgs.TriggeredConveyorBeltStatus.Descriptor; }
      }
      
      public override TriggeredConveyorBeltStatus DefaultInstanceForType {
        get { return global::atwork_pb_msgs.TriggeredConveyorBeltStatus.DefaultInstance; }
      }
      
      public override TriggeredConveyorBeltStatus BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is TriggeredConveyorBeltStatus) {
          return MergeFrom((TriggeredConveyorBeltStatus) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(TriggeredConveyorBeltStatus other) {
        if (other == global::atwork_pb_msgs.TriggeredConveyorBeltStatus.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasState) {
          State = other.State;
        }
        if (other.HasCycle) {
          Cycle = other.Cycle;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_triggeredConveyorBeltStatusFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _triggeredConveyorBeltStatusFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              object unknown;
              if(input.ReadEnum(ref result.state_, out unknown)) {
                result.hasState = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(1, (ulong)(int)unknown);
              }
              break;
            }
            case 16: {
              result.hasCycle = input.ReadInt32(ref result.cycle_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasState {
       get { return result.hasState; }
      }
      public global::atwork_pb_msgs.ConveyorBeltRunMode State {
        get { return result.State; }
        set { SetState(value); }
      }
      public Builder SetState(global::atwork_pb_msgs.ConveyorBeltRunMode value) {
        PrepareBuilder();
        result.hasState = true;
        result.state_ = value;
        return this;
      }
      public Builder ClearState() {
        PrepareBuilder();
        result.hasState = false;
        result.state_ = global::atwork_pb_msgs.ConveyorBeltRunMode.STOP;
        return this;
      }
      
      public bool HasCycle {
        get { return result.hasCycle; }
      }
      public int Cycle {
        get { return result.Cycle; }
        set { SetCycle(value); }
      }
      public Builder SetCycle(int value) {
        PrepareBuilder();
        result.hasCycle = true;
        result.cycle_ = value;
        return this;
      }
      public Builder ClearCycle() {
        PrepareBuilder();
        result.hasCycle = false;
        result.cycle_ = 0;
        return this;
      }
    }
    static TriggeredConveyorBeltStatus() {
      object.ReferenceEquals(global::atwork_pb_msgs.ConveyorBelt.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class TriggeredConveyorBeltCommand : pb::GeneratedMessage<TriggeredConveyorBeltCommand, TriggeredConveyorBeltCommand.Builder> {
    private TriggeredConveyorBeltCommand() { }
    private static readonly TriggeredConveyorBeltCommand defaultInstance = new TriggeredConveyorBeltCommand().MakeReadOnly();
    private static readonly string[] _triggeredConveyorBeltCommandFieldNames = new string[] { "command", "next_cycle" };
    private static readonly uint[] _triggeredConveyorBeltCommandFieldTags = new uint[] { 8, 16 };
    public static TriggeredConveyorBeltCommand DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override TriggeredConveyorBeltCommand DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override TriggeredConveyorBeltCommand ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::atwork_pb_msgs.ConveyorBelt.internal__static_atwork_pb_msgs_TriggeredConveyorBeltCommand__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<TriggeredConveyorBeltCommand, TriggeredConveyorBeltCommand.Builder> InternalFieldAccessors {
      get { return global::atwork_pb_msgs.ConveyorBelt.internal__static_atwork_pb_msgs_TriggeredConveyorBeltCommand__FieldAccessorTable; }
    }
    
    #region Nested types
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public static partial class Types {
      public enum CompType {
        COMP_ID = 2000,
        MSG_TYPE = 309,
      }
      
    }
    #endregion
    
    public const int CommandFieldNumber = 1;
    private bool hasCommand;
    private global::atwork_pb_msgs.ConveyorBeltRunMode command_ = global::atwork_pb_msgs.ConveyorBeltRunMode.STOP;
    public bool HasCommand {
      get { return hasCommand; }
    }
    public global::atwork_pb_msgs.ConveyorBeltRunMode Command {
      get { return command_; }
    }
    
    public const int NextCycleFieldNumber = 2;
    private bool hasNextCycle;
    private int nextCycle_;
    public bool HasNextCycle {
      get { return hasNextCycle; }
    }
    public int NextCycle {
      get { return nextCycle_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasCommand) return false;
        if (!hasNextCycle) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _triggeredConveyorBeltCommandFieldNames;
      if (hasCommand) {
        output.WriteEnum(1, field_names[0], (int) Command, Command);
      }
      if (hasNextCycle) {
        output.WriteInt32(2, field_names[1], NextCycle);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasCommand) {
        size += pb::CodedOutputStream.ComputeEnumSize(1, (int) Command);
      }
      if (hasNextCycle) {
        size += pb::CodedOutputStream.ComputeInt32Size(2, NextCycle);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static TriggeredConveyorBeltCommand ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static TriggeredConveyorBeltCommand ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static TriggeredConveyorBeltCommand ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static TriggeredConveyorBeltCommand ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static TriggeredConveyorBeltCommand ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static TriggeredConveyorBeltCommand ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static TriggeredConveyorBeltCommand ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static TriggeredConveyorBeltCommand ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static TriggeredConveyorBeltCommand ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static TriggeredConveyorBeltCommand ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private TriggeredConveyorBeltCommand MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(TriggeredConveyorBeltCommand prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<TriggeredConveyorBeltCommand, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(TriggeredConveyorBeltCommand cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private TriggeredConveyorBeltCommand result;
      
      private TriggeredConveyorBeltCommand PrepareBuilder() {
        if (resultIsReadOnly) {
          TriggeredConveyorBeltCommand original = result;
          result = new TriggeredConveyorBeltCommand();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override TriggeredConveyorBeltCommand MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::atwork_pb_msgs.TriggeredConveyorBeltCommand.Descriptor; }
      }
      
      public override TriggeredConveyorBeltCommand DefaultInstanceForType {
        get { return global::atwork_pb_msgs.TriggeredConveyorBeltCommand.DefaultInstance; }
      }
      
      public override TriggeredConveyorBeltCommand BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is TriggeredConveyorBeltCommand) {
          return MergeFrom((TriggeredConveyorBeltCommand) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(TriggeredConveyorBeltCommand other) {
        if (other == global::atwork_pb_msgs.TriggeredConveyorBeltCommand.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasCommand) {
          Command = other.Command;
        }
        if (other.HasNextCycle) {
          NextCycle = other.NextCycle;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_triggeredConveyorBeltCommandFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _triggeredConveyorBeltCommandFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              object unknown;
              if(input.ReadEnum(ref result.command_, out unknown)) {
                result.hasCommand = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(1, (ulong)(int)unknown);
              }
              break;
            }
            case 16: {
              result.hasNextCycle = input.ReadInt32(ref result.nextCycle_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasCommand {
       get { return result.hasCommand; }
      }
      public global::atwork_pb_msgs.ConveyorBeltRunMode Command {
        get { return result.Command; }
        set { SetCommand(value); }
      }
      public Builder SetCommand(global::atwork_pb_msgs.ConveyorBeltRunMode value) {
        PrepareBuilder();
        result.hasCommand = true;
        result.command_ = value;
        return this;
      }
      public Builder ClearCommand() {
        PrepareBuilder();
        result.hasCommand = false;
        result.command_ = global::atwork_pb_msgs.ConveyorBeltRunMode.STOP;
        return this;
      }
      
      public bool HasNextCycle {
        get { return result.hasNextCycle; }
      }
      public int NextCycle {
        get { return result.NextCycle; }
        set { SetNextCycle(value); }
      }
      public Builder SetNextCycle(int value) {
        PrepareBuilder();
        result.hasNextCycle = true;
        result.nextCycle_ = value;
        return this;
      }
      public Builder ClearNextCycle() {
        PrepareBuilder();
        result.hasNextCycle = false;
        result.nextCycle_ = 0;
        return this;
      }
    }
    static TriggeredConveyorBeltCommand() {
      object.ReferenceEquals(global::atwork_pb_msgs.ConveyorBelt.Descriptor, null);
    }
  }
  
  #endregion
  
}

#endregion Designer generated code
