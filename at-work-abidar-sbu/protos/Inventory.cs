// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Inventory.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace AtworkPbMsgs {

  /// <summary>Holder for reflection information generated from Inventory.proto</summary>
  public static partial class InventoryReflection {

    #region Descriptor
    /// <summary>File descriptor for Inventory.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static InventoryReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg9JbnZlbnRvcnkucHJvdG8SDmF0d29ya19wYl9tc2dzIugCChBPYmplY3RJ",
            "ZGVudGlmaWVyEjkKBHR5cGUYASABKA4yKy5hdHdvcmtfcGJfbXNncy5PYmpl",
            "Y3RJZGVudGlmaWVyLk9iamVjdFR5cGUSDwoHdHlwZV9pZBgCIAEoAxITCgtp",
            "bnN0YW5jZV9pZBgDIAEoAxITCgtkZXNjcmlwdGlvbhgEIAEoCSLdAQoKT2Jq",
            "ZWN0VHlwZRIHCgNLSVIQABIMCghGMjBfMjBfQhABEgwKCEYyMF8yMF9HEAIS",
            "DAoIUzQwXzQwX0IQAxIMCghTNDBfNDBfRxAEEgsKB00yMF8xMDAQBRIHCgNN",
            "MjAQBhIHCgNNMzAQBxIHCgNSMjAQCBIPCgtCRUFSSU5HX0JPWBAJEgsKB0JF",
            "QVJJTkcQChIICgRBWElTEAsSEQoNRElTVEFOQ0VfVFVCRRAMEgkKBU1PVE9S",
            "EA0SDwoLQ09OVEFJTkVSX0IQDhIPCgtDT05UQUlORVJfUhAPIskBChJMb2Nh",
            "dGlvbklkZW50aWZpZXISPQoEdHlwZRgBIAEoDjIvLmF0d29ya19wYl9tc2dz",
            "LkxvY2F0aW9uSWRlbnRpZmllci5Mb2NhdGlvblR5cGUSEwoLaW5zdGFuY2Vf",
            "aWQYAiABKAQSEwoLZGVzY3JpcHRpb24YAyABKAkiSgoMTG9jYXRpb25UeXBl",
            "EgcKA0tJUhAAEgYKAlNIEAESBgoCV1MQAhIGCgJDQhADEgYKAldQEAQSBgoC",
            "UFAQBRIJCgVST0JPVBAGItYCCglJbnZlbnRvcnkSLQoFaXRlbXMYASADKAsy",
            "Hi5hdHdvcmtfcGJfbXNncy5JbnZlbnRvcnkuSXRlbRrnAQoESXRlbRIwCgZv",
            "YmplY3QYASABKAsyIC5hdHdvcmtfcGJfbXNncy5PYmplY3RJZGVudGlmaWVy",
            "EhAKCHF1YW50aXR5GAIgASgEEjMKCWNvbnRhaW5lchgDIAEoCzIgLmF0d29y",
            "a19wYl9tc2dzLk9iamVjdElkZW50aWZpZXISNAoIbG9jYXRpb24YBCABKAsy",
            "Ii5hdHdvcmtfcGJfbXNncy5Mb2NhdGlvbklkZW50aWZpZXIiMAoIQ29tcFR5",
            "cGUSBwoDS0lSEAASDAoHQ09NUF9JRBDQDxINCghNU0dfVFlQRRDLASIwCghD",
            "b21wVHlwZRIHCgNLSVIQABIMCgdDT01QX0lEENAPEg0KCE1TR19UWVBFEMgB",
            "ItECCgtUcmFuc2FjdGlvbhIWCg50cmFuc2FjdGlvbl9pZBgBIAEoBBIQCghv",
            "cmRlcl9pZBgCIAEoBBIwCgZvYmplY3QYAyABKAsyIC5hdHdvcmtfcGJfbXNn",
            "cy5PYmplY3RJZGVudGlmaWVyEhAKCHF1YW50aXR5GAQgASgNEjIKBmFjdGlv",
            "bhgFIAEoDjIiLmF0d29ya19wYl9tc2dzLlRyYW5zYWN0aW9uLkFjdGlvbhIy",
            "CgZzb3VyY2UYBiABKAsyIi5hdHdvcmtfcGJfbXNncy5Mb2NhdGlvbklkZW50",
            "aWZpZXISNwoLZGVzdGluYXRpb24YByABKAsyIi5hdHdvcmtfcGJfbXNncy5M",
            "b2NhdGlvbklkZW50aWZpZXIiMwoGQWN0aW9uEgcKA0tJUhAAEgoKBklOU0VS",
            "VBABEgoKBlJFTU9WRRACEggKBE1PVkUQAyJ1Cg5UcmFuc2FjdGlvbkxvZxIx",
            "Cgx0cmFuc2FjdGlvbnMYASADKAsyGy5hdHdvcmtfcGJfbXNncy5UcmFuc2Fj",
            "dGlvbiIwCghDb21wVHlwZRIHCgNLSVIQABIMCgdDT01QX0lEENAPEg0KCE1T",
            "R19UWVBFEMkBQikKFm9yZy5hdHdvcmsuY29tbW9uX21zZ3NCD0ludmVudG9y",
            "eVByb3Rvc2IGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::AtworkPbMsgs.ObjectIdentifier), global::AtworkPbMsgs.ObjectIdentifier.Parser, new[]{ "Type", "TypeId", "InstanceId", "Description" }, null, new[]{ typeof(global::AtworkPbMsgs.ObjectIdentifier.Types.ObjectType) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AtworkPbMsgs.LocationIdentifier), global::AtworkPbMsgs.LocationIdentifier.Parser, new[]{ "Type", "InstanceId", "Description" }, null, new[]{ typeof(global::AtworkPbMsgs.LocationIdentifier.Types.LocationType) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AtworkPbMsgs.Inventory), global::AtworkPbMsgs.Inventory.Parser, new[]{ "Items" }, null, new[]{ typeof(global::AtworkPbMsgs.Inventory.Types.CompType) }, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::AtworkPbMsgs.Inventory.Types.Item), global::AtworkPbMsgs.Inventory.Types.Item.Parser, new[]{ "Object", "Quantity", "Container", "Location" }, null, new[]{ typeof(global::AtworkPbMsgs.Inventory.Types.Item.Types.CompType) }, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::AtworkPbMsgs.Transaction), global::AtworkPbMsgs.Transaction.Parser, new[]{ "TransactionId", "OrderId", "Object", "Quantity", "Action", "Source", "Destination" }, null, new[]{ typeof(global::AtworkPbMsgs.Transaction.Types.Action) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AtworkPbMsgs.TransactionLog), global::AtworkPbMsgs.TransactionLog.Parser, new[]{ "Transactions" }, null, new[]{ typeof(global::AtworkPbMsgs.TransactionLog.Types.CompType) }, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class ObjectIdentifier : pb::IMessage<ObjectIdentifier> {
    private static readonly pb::MessageParser<ObjectIdentifier> _parser = new pb::MessageParser<ObjectIdentifier>(() => new ObjectIdentifier());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ObjectIdentifier> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AtworkPbMsgs.InventoryReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectIdentifier() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectIdentifier(ObjectIdentifier other) : this() {
      type_ = other.type_;
      typeId_ = other.typeId_;
      instanceId_ = other.instanceId_;
      description_ = other.description_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectIdentifier Clone() {
      return new ObjectIdentifier(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private global::AtworkPbMsgs.ObjectIdentifier.Types.ObjectType type_ = 0;
    /// <summary>
    /// The object class (e.g. "EM-01") consists of the type ("EM") and a type
    /// ID (1).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AtworkPbMsgs.ObjectIdentifier.Types.ObjectType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "type_id" field.</summary>
    public const int TypeIdFieldNumber = 2;
    private long typeId_;
    /// <summary>
    /// The type ID of the object
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TypeId {
      get { return typeId_; }
      set {
        typeId_ = value;
      }
    }

    /// <summary>Field number for the "instance_id" field.</summary>
    public const int InstanceIdFieldNumber = 3;
    private long instanceId_;
    /// <summary>
    /// All labeled objects also have an instance ID. For example, there could
    /// exist two instances of EM-01 containers, called "EM-01-001" and
    /// "EM-01-002" where "EM-01" represents the item's class and "001"/"002" are
    /// the instance IDs.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long InstanceId {
      get { return instanceId_; }
      set {
        instanceId_ = value;
      }
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 4;
    private string description_ = "";
    /// <summary>
    /// A human-readable description of the identifier
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Description {
      get { return description_; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ObjectIdentifier);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ObjectIdentifier other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (TypeId != other.TypeId) return false;
      if (InstanceId != other.InstanceId) return false;
      if (Description != other.Description) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      if (TypeId != 0L) hash ^= TypeId.GetHashCode();
      if (InstanceId != 0L) hash ^= InstanceId.GetHashCode();
      if (Description.Length != 0) hash ^= Description.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      if (TypeId != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(TypeId);
      }
      if (InstanceId != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(InstanceId);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Description);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (TypeId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TypeId);
      }
      if (InstanceId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(InstanceId);
      }
      if (Description.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ObjectIdentifier other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.TypeId != 0L) {
        TypeId = other.TypeId;
      }
      if (other.InstanceId != 0L) {
        InstanceId = other.InstanceId;
      }
      if (other.Description.Length != 0) {
        Description = other.Description;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            type_ = (global::AtworkPbMsgs.ObjectIdentifier.Types.ObjectType) input.ReadEnum();
            break;
          }
          case 16: {
            TypeId = input.ReadInt64();
            break;
          }
          case 24: {
            InstanceId = input.ReadInt64();
            break;
          }
          case 34: {
            Description = input.ReadString();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the ObjectIdentifier message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum ObjectType {
        [pbr::OriginalName("KIR")] Kir = 0,
        /// <summary>
        /// Small Aluminium Profile (Black)
        /// </summary>
        [pbr::OriginalName("F20_20_B")] F2020B = 1,
        /// <summary>
        /// Small Aluminium Profile (Grey)
        /// </summary>
        [pbr::OriginalName("F20_20_G")] F2020G = 2,
        /// <summary>
        /// Big Aluminium Profile (Black)
        /// </summary>
        [pbr::OriginalName("S40_40_B")] S4040B = 3,
        /// <summary>
        /// Big Aluminium Profile (Grey)
        /// </summary>
        [pbr::OriginalName("S40_40_G")] S4040G = 4,
        /// <summary>
        /// Screw (Bolt)
        /// </summary>
        [pbr::OriginalName("M20_100")] M20100 = 5,
        /// <summary>
        /// Small Nut
        /// </summary>
        [pbr::OriginalName("M20")] M20 = 6,
        /// <summary>
        /// Large Nut
        /// </summary>
        [pbr::OriginalName("M30")] M30 = 7,
        /// <summary>
        /// Plastic Tube
        /// </summary>
        [pbr::OriginalName("R20")] R20 = 8,
        /// <summary>
        /// </summary>
        [pbr::OriginalName("BEARING_BOX")] BearingBox = 9,
        /// <summary>
        /// </summary>
        [pbr::OriginalName("BEARING")] Bearing = 10,
        /// <summary>
        /// </summary>
        [pbr::OriginalName("AXIS")] Axis = 11,
        /// <summary>
        /// </summary>
        [pbr::OriginalName("DISTANCE_TUBE")] DistanceTube = 12,
        /// <summary>
        /// </summary>
        [pbr::OriginalName("MOTOR")] Motor = 13,
        /// <summary>
        /// A Container (Blue)
        /// </summary>
        [pbr::OriginalName("CONTAINER_B")] ContainerB = 14,
        /// <summary>
        /// A Container (Red)
        /// </summary>
        [pbr::OriginalName("CONTAINER_R")] ContainerR = 15,
      }

    }
    #endregion

  }

  public sealed partial class LocationIdentifier : pb::IMessage<LocationIdentifier> {
    private static readonly pb::MessageParser<LocationIdentifier> _parser = new pb::MessageParser<LocationIdentifier>(() => new LocationIdentifier());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LocationIdentifier> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AtworkPbMsgs.InventoryReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LocationIdentifier() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LocationIdentifier(LocationIdentifier other) : this() {
      type_ = other.type_;
      instanceId_ = other.instanceId_;
      description_ = other.description_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LocationIdentifier Clone() {
      return new LocationIdentifier(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private global::AtworkPbMsgs.LocationIdentifier.Types.LocationType type_ = 0;
    /// <summary>
    /// The type of location
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AtworkPbMsgs.LocationIdentifier.Types.LocationType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "instance_id" field.</summary>
    public const int InstanceIdFieldNumber = 2;
    private ulong instanceId_;
    /// <summary>
    /// The instance ID of the location (e.g. if there are several shelves)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong InstanceId {
      get { return instanceId_; }
      set {
        instanceId_ = value;
      }
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 3;
    private string description_ = "";
    /// <summary>
    /// A human-readable description of the location
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Description {
      get { return description_; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LocationIdentifier);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LocationIdentifier other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (InstanceId != other.InstanceId) return false;
      if (Description != other.Description) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      if (InstanceId != 0UL) hash ^= InstanceId.GetHashCode();
      if (Description.Length != 0) hash ^= Description.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      if (InstanceId != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(InstanceId);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Description);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (InstanceId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(InstanceId);
      }
      if (Description.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LocationIdentifier other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.InstanceId != 0UL) {
        InstanceId = other.InstanceId;
      }
      if (other.Description.Length != 0) {
        Description = other.Description;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            type_ = (global::AtworkPbMsgs.LocationIdentifier.Types.LocationType) input.ReadEnum();
            break;
          }
          case 16: {
            InstanceId = input.ReadUInt64();
            break;
          }
          case 26: {
            Description = input.ReadString();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the LocationIdentifier message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum LocationType {
        [pbr::OriginalName("KIR")] Kir = 0,
        /// <summary>
        /// Shelf
        /// </summary>
        [pbr::OriginalName("SH")] Sh = 1,
        /// <summary>
        /// Workstation
        /// </summary>
        [pbr::OriginalName("WS")] Ws = 2,
        /// <summary>
        /// Conveyor belt
        /// </summary>
        [pbr::OriginalName("CB")] Cb = 3,
        /// <summary>
        /// Way Point (additional navigation goal)
        /// </summary>
        [pbr::OriginalName("WP")] Wp = 4,
        /// <summary>
        /// Precision Placement Location
        /// </summary>
        [pbr::OriginalName("PP")] Pp = 5,
        /// <summary>
        /// On Robot
        /// </summary>
        [pbr::OriginalName("ROBOT")] Robot = 6,
      }

    }
    #endregion

  }

  public sealed partial class Inventory : pb::IMessage<Inventory> {
    private static readonly pb::MessageParser<Inventory> _parser = new pb::MessageParser<Inventory>(() => new Inventory());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Inventory> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AtworkPbMsgs.InventoryReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Inventory() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Inventory(Inventory other) : this() {
      items_ = other.items_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Inventory Clone() {
      return new Inventory(this);
    }

    /// <summary>Field number for the "items" field.</summary>
    public const int ItemsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::AtworkPbMsgs.Inventory.Types.Item> _repeated_items_codec
        = pb::FieldCodec.ForMessage(10, global::AtworkPbMsgs.Inventory.Types.Item.Parser);
    private readonly pbc::RepeatedField<global::AtworkPbMsgs.Inventory.Types.Item> items_ = new pbc::RepeatedField<global::AtworkPbMsgs.Inventory.Types.Item>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::AtworkPbMsgs.Inventory.Types.Item> Items {
      get { return items_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Inventory);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Inventory other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!items_.Equals(other.items_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= items_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      items_.WriteTo(output, _repeated_items_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += items_.CalculateSize(_repeated_items_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Inventory other) {
      if (other == null) {
        return;
      }
      items_.Add(other.items_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            items_.AddEntriesFrom(input, _repeated_items_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Inventory message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum CompType {
        [pbr::OriginalName("KIR")] Kir = 0,
        [pbr::OriginalName("COMP_ID")] CompId = 2000,
        [pbr::OriginalName("MSG_TYPE")] MsgType = 200,
      }

      public sealed partial class Item : pb::IMessage<Item> {
        private static readonly pb::MessageParser<Item> _parser = new pb::MessageParser<Item>(() => new Item());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Item> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::AtworkPbMsgs.Inventory.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Item() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Item(Item other) : this() {
          Object = other.object_ != null ? other.Object.Clone() : null;
          quantity_ = other.quantity_;
          Container = other.container_ != null ? other.Container.Clone() : null;
          Location = other.location_ != null ? other.Location.Clone() : null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Item Clone() {
          return new Item(this);
        }

        /// <summary>Field number for the "object" field.</summary>
        public const int ObjectFieldNumber = 1;
        private global::AtworkPbMsgs.ObjectIdentifier object_;
        /// <summary>
        /// A description of the object.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::AtworkPbMsgs.ObjectIdentifier Object {
          get { return object_; }
          set {
            object_ = value;
          }
        }

        /// <summary>Field number for the "quantity" field.</summary>
        public const int QuantityFieldNumber = 2;
        private ulong quantity_;
        /// <summary>
        /// When the object describes a class (i.e. the instance_id of the label is
        /// *not* set) the quantity of the object must be specified. For object
        /// instances (i.e. the instance_id of the label *is* set) the quantity is
        /// ignored.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong Quantity {
          get { return quantity_; }
          set {
            quantity_ = value;
          }
        }

        /// <summary>Field number for the "container" field.</summary>
        public const int ContainerFieldNumber = 3;
        private global::AtworkPbMsgs.ObjectIdentifier container_;
        /// <summary>
        /// Either the container or the location field must be set
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::AtworkPbMsgs.ObjectIdentifier Container {
          get { return container_; }
          set {
            container_ = value;
          }
        }

        /// <summary>Field number for the "location" field.</summary>
        public const int LocationFieldNumber = 4;
        private global::AtworkPbMsgs.LocationIdentifier location_;
        /// <summary>
        /// The location at which this item is stored
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::AtworkPbMsgs.LocationIdentifier Location {
          get { return location_; }
          set {
            location_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Item);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Item other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Object, other.Object)) return false;
          if (Quantity != other.Quantity) return false;
          if (!object.Equals(Container, other.Container)) return false;
          if (!object.Equals(Location, other.Location)) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (object_ != null) hash ^= Object.GetHashCode();
          if (Quantity != 0UL) hash ^= Quantity.GetHashCode();
          if (container_ != null) hash ^= Container.GetHashCode();
          if (location_ != null) hash ^= Location.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (object_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Object);
          }
          if (Quantity != 0UL) {
            output.WriteRawTag(16);
            output.WriteUInt64(Quantity);
          }
          if (container_ != null) {
            output.WriteRawTag(26);
            output.WriteMessage(Container);
          }
          if (location_ != null) {
            output.WriteRawTag(34);
            output.WriteMessage(Location);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (object_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Object);
          }
          if (Quantity != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Quantity);
          }
          if (container_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Container);
          }
          if (location_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Location);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Item other) {
          if (other == null) {
            return;
          }
          if (other.object_ != null) {
            if (object_ == null) {
              object_ = new global::AtworkPbMsgs.ObjectIdentifier();
            }
            Object.MergeFrom(other.Object);
          }
          if (other.Quantity != 0UL) {
            Quantity = other.Quantity;
          }
          if (other.container_ != null) {
            if (container_ == null) {
              container_ = new global::AtworkPbMsgs.ObjectIdentifier();
            }
            Container.MergeFrom(other.Container);
          }
          if (other.location_ != null) {
            if (location_ == null) {
              location_ = new global::AtworkPbMsgs.LocationIdentifier();
            }
            Location.MergeFrom(other.Location);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                if (object_ == null) {
                  object_ = new global::AtworkPbMsgs.ObjectIdentifier();
                }
                input.ReadMessage(object_);
                break;
              }
              case 16: {
                Quantity = input.ReadUInt64();
                break;
              }
              case 26: {
                if (container_ == null) {
                  container_ = new global::AtworkPbMsgs.ObjectIdentifier();
                }
                input.ReadMessage(container_);
                break;
              }
              case 34: {
                if (location_ == null) {
                  location_ = new global::AtworkPbMsgs.LocationIdentifier();
                }
                input.ReadMessage(location_);
                break;
              }
            }
          }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the Item message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          public enum CompType {
            [pbr::OriginalName("KIR")] Kir = 0,
            [pbr::OriginalName("COMP_ID")] CompId = 2000,
            [pbr::OriginalName("MSG_TYPE")] MsgType = 203,
          }

        }
        #endregion

      }

    }
    #endregion

  }

  public sealed partial class Transaction : pb::IMessage<Transaction> {
    private static readonly pb::MessageParser<Transaction> _parser = new pb::MessageParser<Transaction>(() => new Transaction());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Transaction> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AtworkPbMsgs.InventoryReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Transaction() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Transaction(Transaction other) : this() {
      transactionId_ = other.transactionId_;
      orderId_ = other.orderId_;
      Object = other.object_ != null ? other.Object.Clone() : null;
      quantity_ = other.quantity_;
      action_ = other.action_;
      Source = other.source_ != null ? other.Source.Clone() : null;
      Destination = other.destination_ != null ? other.Destination.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Transaction Clone() {
      return new Transaction(this);
    }

    /// <summary>Field number for the "transaction_id" field.</summary>
    public const int TransactionIdFieldNumber = 1;
    private ulong transactionId_;
    /// <summary>
    /// A unique identifier (per robot) of the transaction. Transactions in the
    /// log must start with the transaction_id 1 and must increase the
    /// transaction_id by 1 for each further transaction.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong TransactionId {
      get { return transactionId_; }
      set {
        transactionId_ = value;
      }
    }

    /// <summary>Field number for the "order_id" field.</summary>
    public const int OrderIdFieldNumber = 2;
    private ulong orderId_;
    /// <summary>
    /// The unique ID of one of the active orders to which this transaction is
    /// associated.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong OrderId {
      get { return orderId_; }
      set {
        orderId_ = value;
      }
    }

    /// <summary>Field number for the "object" field.</summary>
    public const int ObjectFieldNumber = 3;
    private global::AtworkPbMsgs.ObjectIdentifier object_;
    /// <summary>
    /// A class or instance description of the object which is modified by the
    /// transaction.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AtworkPbMsgs.ObjectIdentifier Object {
      get { return object_; }
      set {
        object_ = value;
      }
    }

    /// <summary>Field number for the "quantity" field.</summary>
    public const int QuantityFieldNumber = 4;
    private uint quantity_;
    /// <summary>
    /// This parameter is only  for object classes (i.e. the instance_id
    /// is not set in the ObjectIdentifier). In other cases it is ignored.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Quantity {
      get { return quantity_; }
      set {
        quantity_ = value;
      }
    }

    /// <summary>Field number for the "action" field.</summary>
    public const int ActionFieldNumber = 5;
    private global::AtworkPbMsgs.Transaction.Types.Action action_ = 0;
    /// <summary>
    /// The action to be performed
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AtworkPbMsgs.Transaction.Types.Action Action {
      get { return action_; }
      set {
        action_ = value;
      }
    }

    /// <summary>Field number for the "source" field.</summary>
    public const int SourceFieldNumber = 6;
    private global::AtworkPbMsgs.LocationIdentifier source_;
    /// <summary>
    /// The semantics of the source and destination parameter depend on the
    /// action:
    /// * MOVE(source, destination) i.e. source &amp; destination 
    /// * INSERT(destination) i.e. destination , source ignored
    /// * REMOVE(source) i.e. source , destination ignored
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AtworkPbMsgs.LocationIdentifier Source {
      get { return source_; }
      set {
        source_ = value;
      }
    }

    /// <summary>Field number for the "destination" field.</summary>
    public const int DestinationFieldNumber = 7;
    private global::AtworkPbMsgs.LocationIdentifier destination_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AtworkPbMsgs.LocationIdentifier Destination {
      get { return destination_; }
      set {
        destination_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Transaction);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Transaction other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TransactionId != other.TransactionId) return false;
      if (OrderId != other.OrderId) return false;
      if (!object.Equals(Object, other.Object)) return false;
      if (Quantity != other.Quantity) return false;
      if (Action != other.Action) return false;
      if (!object.Equals(Source, other.Source)) return false;
      if (!object.Equals(Destination, other.Destination)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TransactionId != 0UL) hash ^= TransactionId.GetHashCode();
      if (OrderId != 0UL) hash ^= OrderId.GetHashCode();
      if (object_ != null) hash ^= Object.GetHashCode();
      if (Quantity != 0) hash ^= Quantity.GetHashCode();
      if (Action != 0) hash ^= Action.GetHashCode();
      if (source_ != null) hash ^= Source.GetHashCode();
      if (destination_ != null) hash ^= Destination.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TransactionId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(TransactionId);
      }
      if (OrderId != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(OrderId);
      }
      if (object_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Object);
      }
      if (Quantity != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Quantity);
      }
      if (Action != 0) {
        output.WriteRawTag(40);
        output.WriteEnum((int) Action);
      }
      if (source_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(Source);
      }
      if (destination_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(Destination);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TransactionId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TransactionId);
      }
      if (OrderId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(OrderId);
      }
      if (object_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Object);
      }
      if (Quantity != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Quantity);
      }
      if (Action != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Action);
      }
      if (source_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Source);
      }
      if (destination_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Destination);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Transaction other) {
      if (other == null) {
        return;
      }
      if (other.TransactionId != 0UL) {
        TransactionId = other.TransactionId;
      }
      if (other.OrderId != 0UL) {
        OrderId = other.OrderId;
      }
      if (other.object_ != null) {
        if (object_ == null) {
          object_ = new global::AtworkPbMsgs.ObjectIdentifier();
        }
        Object.MergeFrom(other.Object);
      }
      if (other.Quantity != 0) {
        Quantity = other.Quantity;
      }
      if (other.Action != 0) {
        Action = other.Action;
      }
      if (other.source_ != null) {
        if (source_ == null) {
          source_ = new global::AtworkPbMsgs.LocationIdentifier();
        }
        Source.MergeFrom(other.Source);
      }
      if (other.destination_ != null) {
        if (destination_ == null) {
          destination_ = new global::AtworkPbMsgs.LocationIdentifier();
        }
        Destination.MergeFrom(other.Destination);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TransactionId = input.ReadUInt64();
            break;
          }
          case 16: {
            OrderId = input.ReadUInt64();
            break;
          }
          case 26: {
            if (object_ == null) {
              object_ = new global::AtworkPbMsgs.ObjectIdentifier();
            }
            input.ReadMessage(object_);
            break;
          }
          case 32: {
            Quantity = input.ReadUInt32();
            break;
          }
          case 40: {
            action_ = (global::AtworkPbMsgs.Transaction.Types.Action) input.ReadEnum();
            break;
          }
          case 50: {
            if (source_ == null) {
              source_ = new global::AtworkPbMsgs.LocationIdentifier();
            }
            input.ReadMessage(source_);
            break;
          }
          case 58: {
            if (destination_ == null) {
              destination_ = new global::AtworkPbMsgs.LocationIdentifier();
            }
            input.ReadMessage(destination_);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Transaction message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Action {
        [pbr::OriginalName("KIR")] Kir = 0,
        /// <summary>
        /// INSERT instantiates new objects in the inventory. Use this action e.g.
        /// to add a new, external delivery to the inventory. Alternatively, the
        /// INSERT action (after REMOVE actions) is also used to change the class
        /// of an object, for instance, after assembly.
        /// </summary>
        [pbr::OriginalName("INSERT")] Insert = 1,
        /// <summary>
        /// REMOVE deletes existing objects from the inventory. Use this action
        /// e.g. to remove objects which have been shipped. Alternatively, REMOVE
        /// actions (before INSERT actions) are also used to change the class of an
        /// object, for instance, after assembly.
        /// </summary>
        [pbr::OriginalName("REMOVE")] Remove = 2,
        /// <summary>
        /// MOVE modifies the location of the specified objects. Use this action
        /// e.g. to describe that a robot grasped or placed an object.
        /// </summary>
        [pbr::OriginalName("MOVE")] Move = 3,
      }

    }
    #endregion

  }

  public sealed partial class TransactionLog : pb::IMessage<TransactionLog> {
    private static readonly pb::MessageParser<TransactionLog> _parser = new pb::MessageParser<TransactionLog>(() => new TransactionLog());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TransactionLog> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AtworkPbMsgs.InventoryReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransactionLog() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransactionLog(TransactionLog other) : this() {
      transactions_ = other.transactions_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransactionLog Clone() {
      return new TransactionLog(this);
    }

    /// <summary>Field number for the "transactions" field.</summary>
    public const int TransactionsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::AtworkPbMsgs.Transaction> _repeated_transactions_codec
        = pb::FieldCodec.ForMessage(10, global::AtworkPbMsgs.Transaction.Parser);
    private readonly pbc::RepeatedField<global::AtworkPbMsgs.Transaction> transactions_ = new pbc::RepeatedField<global::AtworkPbMsgs.Transaction>();
    /// <summary>
    /// The complete history of inventory transactions performed by the robot
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::AtworkPbMsgs.Transaction> Transactions {
      get { return transactions_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TransactionLog);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TransactionLog other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!transactions_.Equals(other.transactions_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= transactions_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      transactions_.WriteTo(output, _repeated_transactions_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += transactions_.CalculateSize(_repeated_transactions_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TransactionLog other) {
      if (other == null) {
        return;
      }
      transactions_.Add(other.transactions_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            transactions_.AddEntriesFrom(input, _repeated_transactions_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the TransactionLog message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum CompType {
        [pbr::OriginalName("KIR")] Kir = 0,
        [pbr::OriginalName("COMP_ID")] CompId = 2000,
        [pbr::OriginalName("MSG_TYPE")] MsgType = 201,
      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
