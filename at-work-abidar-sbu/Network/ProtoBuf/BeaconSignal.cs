// Generated by ProtoGen, Version=2.4.1.555, Culture=neutral, PublicKeyToken=17b3b1f090c3ea48.  DO NOT EDIT!
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace atwork_pb_msgs {
  
  namespace Proto {
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public static partial class BeaconSignal {
    
      #region Extension registration
      public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
      }
      #endregion
      #region Static variables
      internal static pbd::MessageDescriptor internal__static_atwork_pb_msgs_BeaconSignal__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::atwork_pb_msgs.BeaconSignal, global::atwork_pb_msgs.BeaconSignal.Builder> internal__static_atwork_pb_msgs_BeaconSignal__FieldAccessorTable;
      #endregion
      #region Descriptor
      public static pbd::FileDescriptor Descriptor {
        get { return descriptor; }
      }
      private static pbd::FileDescriptor descriptor;
      
      static BeaconSignal() {
        byte[] descriptorData = global::System.Convert.FromBase64String(
            string.Concat(
              "ChJCZWFjb25TaWduYWwucHJvdG8SDmF0d29ya19wYl9tc2dzGgpUaW1lLnBy", 
              "b3RvIo0BCgxCZWFjb25TaWduYWwSIgoEdGltZRgBIAIoCzIULmF0d29ya19w", 
              "Yl9tc2dzLlRpbWUSCwoDc2VxGAIgAigEEhEKCXRlYW1fbmFtZRgDIAIoCRIR", 
              "CglwZWVyX25hbWUYBCACKAkiJgoIQ29tcFR5cGUSDAoHQ09NUF9JRBDQDxIM", 
              "CghNU0dfVFlQRRABQiwKFm9yZy5hdHdvcmsuY29tbW9uX21zZ3NCEkJlYWNv", 
            "blNpZ25hbFByb3Rvcw=="));
        pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
          descriptor = root;
          internal__static_atwork_pb_msgs_BeaconSignal__Descriptor = Descriptor.MessageTypes[0];
          internal__static_atwork_pb_msgs_BeaconSignal__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::atwork_pb_msgs.BeaconSignal, global::atwork_pb_msgs.BeaconSignal.Builder>(internal__static_atwork_pb_msgs_BeaconSignal__Descriptor,
                  new string[] { "Time", "Seq", "TeamName", "PeerName", });
          return null;
        };
        pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
            new pbd::FileDescriptor[] {
            global::atwork_pb_msgs.Proto.Time.Descriptor, 
            }, assigner);
      }
      #endregion
      
    }
  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class BeaconSignal : pb::GeneratedMessage<BeaconSignal, BeaconSignal.Builder> {
    private BeaconSignal() { }
    private static readonly BeaconSignal defaultInstance = new BeaconSignal().MakeReadOnly();
    private static readonly string[] _beaconSignalFieldNames = new string[] { "peer_name", "seq", "team_name", "time" };
    private static readonly uint[] _beaconSignalFieldTags = new uint[] { 34, 16, 26, 10 };
    public static BeaconSignal DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override BeaconSignal DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override BeaconSignal ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::atwork_pb_msgs.Proto.BeaconSignal.internal__static_atwork_pb_msgs_BeaconSignal__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<BeaconSignal, BeaconSignal.Builder> InternalFieldAccessors {
      get { return global::atwork_pb_msgs.Proto.BeaconSignal.internal__static_atwork_pb_msgs_BeaconSignal__FieldAccessorTable; }
    }
    
    #region Nested types
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public static partial class Types {
      public enum CompType {
        COMP_ID = 2000,
        MSG_TYPE = 1,
      }
      
    }
    #endregion
    
    public const int TimeFieldNumber = 1;
    private bool hasTime;
    private global::atwork_pb_msgs.Time time_;
    public bool HasTime {
      get { return hasTime; }
    }
    public global::atwork_pb_msgs.Time Time {
      get { return time_ ?? global::atwork_pb_msgs.Time.DefaultInstance; }
    }
    
    public const int SeqFieldNumber = 2;
    private bool hasSeq;
    private ulong seq_;
    public bool HasSeq {
      get { return hasSeq; }
    }
    [global::System.CLSCompliant(false)]
    public ulong Seq {
      get { return seq_; }
    }
    
    public const int TeamNameFieldNumber = 3;
    private bool hasTeamName;
    private string teamName_ = "";
    public bool HasTeamName {
      get { return hasTeamName; }
    }
    public string TeamName {
      get { return teamName_; }
    }
    
    public const int PeerNameFieldNumber = 4;
    private bool hasPeerName;
    private string peerName_ = "";
    public bool HasPeerName {
      get { return hasPeerName; }
    }
    public string PeerName {
      get { return peerName_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasTime) return false;
        if (!hasSeq) return false;
        if (!hasTeamName) return false;
        if (!hasPeerName) return false;
        if (!Time.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _beaconSignalFieldNames;
      if (hasTime) {
        output.WriteMessage(1, field_names[3], Time);
      }
      if (hasSeq) {
        output.WriteUInt64(2, field_names[1], Seq);
      }
      if (hasTeamName) {
        output.WriteString(3, field_names[2], TeamName);
      }
      if (hasPeerName) {
        output.WriteString(4, field_names[0], PeerName);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasTime) {
        size += pb::CodedOutputStream.ComputeMessageSize(1, Time);
      }
      if (hasSeq) {
        size += pb::CodedOutputStream.ComputeUInt64Size(2, Seq);
      }
      if (hasTeamName) {
        size += pb::CodedOutputStream.ComputeStringSize(3, TeamName);
      }
      if (hasPeerName) {
        size += pb::CodedOutputStream.ComputeStringSize(4, PeerName);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static BeaconSignal ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static BeaconSignal ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static BeaconSignal ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static BeaconSignal ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static BeaconSignal ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static BeaconSignal ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static BeaconSignal ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static BeaconSignal ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static BeaconSignal ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static BeaconSignal ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private BeaconSignal MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(BeaconSignal prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<BeaconSignal, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(BeaconSignal cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private BeaconSignal result;
      
      private BeaconSignal PrepareBuilder() {
        if (resultIsReadOnly) {
          BeaconSignal original = result;
          result = new BeaconSignal();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override BeaconSignal MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::atwork_pb_msgs.BeaconSignal.Descriptor; }
      }
      
      public override BeaconSignal DefaultInstanceForType {
        get { return global::atwork_pb_msgs.BeaconSignal.DefaultInstance; }
      }
      
      public override BeaconSignal BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is BeaconSignal) {
          return MergeFrom((BeaconSignal) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(BeaconSignal other) {
        if (other == global::atwork_pb_msgs.BeaconSignal.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasTime) {
          MergeTime(other.Time);
        }
        if (other.HasSeq) {
          Seq = other.Seq;
        }
        if (other.HasTeamName) {
          TeamName = other.TeamName;
        }
        if (other.HasPeerName) {
          PeerName = other.PeerName;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_beaconSignalFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _beaconSignalFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::atwork_pb_msgs.Time.Builder subBuilder = global::atwork_pb_msgs.Time.CreateBuilder();
              if (result.hasTime) {
                subBuilder.MergeFrom(Time);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Time = subBuilder.BuildPartial();
              break;
            }
            case 16: {
              result.hasSeq = input.ReadUInt64(ref result.seq_);
              break;
            }
            case 26: {
              result.hasTeamName = input.ReadString(ref result.teamName_);
              break;
            }
            case 34: {
              result.hasPeerName = input.ReadString(ref result.peerName_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasTime {
       get { return result.hasTime; }
      }
      public global::atwork_pb_msgs.Time Time {
        get { return result.Time; }
        set { SetTime(value); }
      }
      public Builder SetTime(global::atwork_pb_msgs.Time value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasTime = true;
        result.time_ = value;
        return this;
      }
      public Builder SetTime(global::atwork_pb_msgs.Time.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasTime = true;
        result.time_ = builderForValue.Build();
        return this;
      }
      public Builder MergeTime(global::atwork_pb_msgs.Time value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasTime &&
            result.time_ != global::atwork_pb_msgs.Time.DefaultInstance) {
            result.time_ = global::atwork_pb_msgs.Time.CreateBuilder(result.time_).MergeFrom(value).BuildPartial();
        } else {
          result.time_ = value;
        }
        result.hasTime = true;
        return this;
      }
      public Builder ClearTime() {
        PrepareBuilder();
        result.hasTime = false;
        result.time_ = null;
        return this;
      }
      
      public bool HasSeq {
        get { return result.hasSeq; }
      }
      [global::System.CLSCompliant(false)]
      public ulong Seq {
        get { return result.Seq; }
        set { SetSeq(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetSeq(ulong value) {
        PrepareBuilder();
        result.hasSeq = true;
        result.seq_ = value;
        return this;
      }
      public Builder ClearSeq() {
        PrepareBuilder();
        result.hasSeq = false;
        result.seq_ = 0UL;
        return this;
      }
      
      public bool HasTeamName {
        get { return result.hasTeamName; }
      }
      public string TeamName {
        get { return result.TeamName; }
        set { SetTeamName(value); }
      }
      public Builder SetTeamName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasTeamName = true;
        result.teamName_ = value;
        return this;
      }
      public Builder ClearTeamName() {
        PrepareBuilder();
        result.hasTeamName = false;
        result.teamName_ = "";
        return this;
      }
      
      public bool HasPeerName {
        get { return result.hasPeerName; }
      }
      public string PeerName {
        get { return result.PeerName; }
        set { SetPeerName(value); }
      }
      public Builder SetPeerName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasPeerName = true;
        result.peerName_ = value;
        return this;
      }
      public Builder ClearPeerName() {
        PrepareBuilder();
        result.hasPeerName = false;
        result.peerName_ = "";
        return this;
      }
    }
    static BeaconSignal() {
      object.ReferenceEquals(global::atwork_pb_msgs.Proto.BeaconSignal.Descriptor, null);
    }
  }
  
  #endregion
  
}

#endregion Designer generated code
